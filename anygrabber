import sys
import subprocess
import time
import os
import re
import psutil
from colorama import init, Fore
import requests
from pystyle import Center, Colors, Colorate, System, Anime

# Inicializar colorama
init()

# Colores
RED = Fore.RED
GREEN = Fore.GREEN
YELLOW = Fore.YELLOW
BLUE = Fore.BLUE
MAGENTA = Fore.MAGENTA
CYAN = Fore.CYAN
WHITE = Fore.WHITE
RESET = Fore.RESET

def set_title(title):
    if os.name == 'nt':
        import ctypes
        ctypes.windll.kernel32.SetConsoleTitleW(title)
    else:
        sys.stdout.write(f"\x1b]0;{title}\x07")

def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

banner = f"""
{CYAN}
╔═══════════════════════════════════════════════════════════════╗
║ ██╗██████╗     ██████╗ ██████╗  █████╗ ██████╗ ██████╗ ██████╗██████╗ ║
║███║██╔══██╗   ██╔════╝ ██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚════██╗██╔══██╗║
║╚██║██████╔╝   ██║  ███╗██████╔╝███████║██████╔╝██████╔╝ █████╔╝██████╔╝║
║ ██║██╔═══╝    ██║   ██║██╔══██╗██╔══██║██╔══██╗██╔══██╗ ╚═══██╗██╔══██╗║
║ ██║██║        ╚██████╔╝██║  ██║██║  ██║██████╔╝██████╔╝██████╔╝██║  ██║║
║ ╚═╝╚═╝         ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝║
║                                                                 ║
║        {WHITE}██████╗██████╗ ███████╗ █████╗ ████████╗███████╗██████╗      {CYAN}║
║       {WHITE}██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝██╔══██╗     {CYAN}║
║       {WHITE}██║     ██████╔╝█████╗  ███████║   ██║   █████╗  ██║  ██║     {CYAN}║
║       {WHITE}██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝  ██║  ██║     {CYAN}║
║       {WHITE}╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗██████╔╝     {CYAN}║
║        {WHITE}╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═════╝      {CYAN}║
║                                                                 ║
║        {MAGENTA}██████╗ ██╗   ██╗     ██╗███████╗                          {CYAN}║
║        {MAGENTA}██╔══██╗╚██╗ ██╔╝     ██║██╔════╝                          {CYAN}║
║        {MAGENTA}██████╔╝ ╚████╔╝      ██║███████╗                          {CYAN}║
║        {MAGENTA}██╔══██╗  ╚██╔╝  ██   ██║╚════██║                          {CYAN}║
║        {MAGENTA}██████╔╝   ██║   ╚█████╔╝███████║                          {CYAN}║
║        {MAGENTA}╚═════╝    ╚═╝    ╚════╝ ╚══════╝                          {CYAN}║
║                                                                 ║
╚═══════════════════════════════════════════════════════════════╝
"""

def get_anydesk_connections():
    anydesk_connections = {}
    for conn in psutil.net_connections():
        try:
            process = psutil.Process(conn.pid)
            if 'anydesk' in process.name().lower() and conn.status == 'ESTABLISHED':
                remote_ip, remote_port = conn.raddr
                anydesk_connections[remote_ip] = remote_port
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    return anydesk_connections

def get_ip_info(ip):
    try:
        response = requests.get(f'http://ip-api.com/json/{ip}', timeout=5)
        data = response.json()
        if data['status'] == 'success':
            return data
        else:
            return None
    except Exception as e:
        print(f"{RED}Error al obtener información de IP: {e}{RESET}")
        return None

def main():
    set_title("AnyDesk IP Address Resolver • by JS - Enjoy")
    System.Size(90, 50)
    Anime.Fade(Center.Center(banner), Colors.cyan_to_blue, Colorate.Vertical, time=2)
    clear()
    print(Center.Center(banner))
    print(MAGENTA + "─" * 90 + RESET)
    
    known_connections = set()
    
    while True:
        try:
            connections = get_anydesk_connections()
            new_connections = set(connections.keys()) - known_connections
            
            if new_connections:
                for ip in new_connections:
                    port = connections[ip]
                    print(f"\n{GREEN}¡Nueva conexión de AnyDesk detectada!{RESET}")
                    print(f"{BLUE}Información del usuario:{RESET}")
                    
                    ip_info = get_ip_info(ip)
                    if ip_info:
                        print(f"{WHITE}IP:{RESET} {ip}")
                        print(f"{WHITE}Puerto:{RESET} {port}")
                        print(f"{WHITE}País:{RESET} {ip_info.get('country', 'Desconocido')}")
                        print(f"{WHITE}Región:{RESET} {ip_info.get('regionName', 'Desconocida')}")
                        print(f"{WHITE}Ciudad:{RESET} {ip_info.get('city', 'Desconocida')}")
                        print(f"{WHITE}Código postal:{RESET} {ip_info.get('zip', 'Desconocido')}")
                        print(f"{WHITE}Latitud:{RESET} {ip_info.get('lat', 'Desconocida')}")
                        print(f"{WHITE}Longitud:{RESET} {ip_info.get('lon', 'Desconocida')}")
                        print(f"{WHITE}Zona horaria:{RESET} {ip_info.get('timezone', 'Desconocida')}")
                        print(f"{WHITE}ISP:{RESET} {ip_info.get('isp', 'Desconocido')}")
                        print(f"{WHITE}Organización:{RESET} {ip_info.get('org', 'Desconocida')}")
                        print(f"{WHITE}AS:{RESET} {ip_info.get('as', 'Desconocido')}")
                    else:
                        print(f"{WHITE}No se pudo obtener información detallada de la IP.{RESET}")
                    
                    print(MAGENTA + "─" * 90 + RESET)
                
                known_connections.update(new_connections)
            
            if not any('anydesk' in p.name().lower() for p in psutil.process_iter(['name'])):
                print(f"\r{YELLOW}AnyDesk no está en ejecución. Esperando...{RESET}", end='', flush=True)
            elif not connections:
                print(f"\r{BLUE}Esperando conexiones de AnyDesk...{RESET}", end='', flush=True)
            
            time.sleep(1)
            
        except KeyboardInterrupt:
            print(f"\n\n{MAGENTA}Cerrando AnyDesk IP Resolver. ¡Hasta luego!{RESET}")
            break
        except Exception as e:
            print(f"\n{RED}Error inesperado: {e}{RESET}")
            time.sleep(5)

if __name__ == "__main__":
    main()
